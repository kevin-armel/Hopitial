Informations sur la version
Microsoft JDBC Driver 6.4 pour SQL Server
Février 2018

------------
INTRODUCTION
------------
Ce fichier contient des informations importantes ou de dernière minute qui complètent la documentation 
de Microsoft JDBC Driver 6.4 pour SQL Server. Il est recommandé de lire ce fichier entièrement avant de procéder à l’installation 
du pilote JDBC.

Nous attachons une grande importance à vos commentaires et nous nous efforçons d’y répondre 
le plus rapidement possible. Pour plus d’informations sur l’envoi de commentaires sur les blogs et les forums en ligne du pilote JDBC, 
consultez la page Microsoft JDBC Driver 6.4 pour SQL Server sur https://aka.ms/mssql-jdbc


------------
INSTALLATION
------------
Les instructions relatives à l'installation du pilote JDBC se trouvent dans le fichier install.txt. Reportez-vous à ce fichier pour 
obtenir des informations sur l’installation du pilote JDBC sur les systèmes d’exploitation Windows, Linux et Mac.


---------------------------
SYSTÈMES D'EXPLOITATION PRIS EN CHARGE
---------------------------
Les systèmes d’exploitation pris en charge pour Microsoft JDBC Driver 6.4 pour SQL Server sont les suivants :
  Windows Server 2008 SP2
  Windows Server 2008 R2 SP1
  Windows Server 2012
  Windows Server 2012 R2
  Windows Server 2016
  Windows 8
  Windows 8.1
  Windows 10
  Linux
  Mac

La liste ci-dessus présente certains des systèmes d'exploitation pris en charge. Le pilote JDBC est conçu 
pour fonctionner sur tout système d’exploitation prenant en charge l’utilisation d'une machine virtuelle Java (JVM). 

Toutefois, seulement les systèmes d’exploitation les plus récents de Linux et Mac OS (Ubuntu 17, CentOs 7, Suse 12, 
Mac OS 10.13) ont été testés pour la compatibilité et la prise en charge.


----------------
CONTENU DE LA VERSION
----------------
Le fichier exécutable zip ou tar de Microsoft JDBC Driver 6.4 pour SQL Server contient les fichiers suivants 
dans les emplacements spécifiés, relatifs au répertoire d’installation sélectionné :

<répertoire d'installation>\sqljdbc_<version>\<langue>\install.txt
<répertoire d'installation>\sqljdbc_<version>\<langue>\release.txt
<répertoire d'installation>\sqljdbc_<version>\<langue>\license.txt
<répertoire d’installation>\sqljdbc_<version>\<langue>\thirdpartynotices.txt
<répertoire d’installation>\sqljdbc_<version>\<langue>\mssql-jdbc-6.4.0.jre7.jar
<répertoire d’installation>\sqljdbc_<version>\<langue>\mssql-jdbc-6.4.0.jre8.jar
<répertoire d’installation>\sqljdbc_<version>\<langue>\mssql-jdbc-6.4.0.jre9.jar
<répertoire d'installation>\sqljdbc_<version>\<langue>\auth\x86\sqljdbc_auth.dll
<répertoire d'installation>\sqljdbc_<version>\<langue>\auth\x64\sqljdbc_auth.dll
<répertoire d’installation>\sqljdbc_<version>\<langue>\samples\<fichiers exemples...>
<répertoire d'installation>\sqljdbc_<version>\<langue>\xa\xa_install.sql
<répertoire d'installation>\sqljdbc_<version>\<langue>\xa\x86\sqljdbc_xa.dll
<répertoire d'installation>\sqljdbc_<version>\<langue>\xa\x64\sqljdbc_xa.dll

Pour plus d’informations sur chaque composant, consultez la documentation en ligne
de Microsoft JDBC Driver pour SQL Server : 
https://msdn.microsoft.com/fr-fr/library/dn197850(v=sql.10).aspx


-------------
DOCUMENTATION
-------------
Les informations sur la version, les instructions d'installation et les termes du contrat de licence sont inclus dans ce package. 
Le reste de la documentation est disponible en ligne.

Veuillez noter que les fichiers d’aide hors connexion ne sont plus disponibles. 


---------
FICHIERS JAR
---------
Pour prendre en charge la compatibilité descendante et divers scénarios de mise à niveau, JDBC Driver 6.4 comprend 
trois bibliothèques de classes JAR dans chaque package d’installation : 
	mssql-jdbc-6.4.0.jre7.jar
	mssql-jdbc-6.4.0.jre8.jar
	mssql-jdbc-6.4.0.jre9.jar.


----------------------
FICHIERS PROPRES AUX FONCTIONNALITÉS
----------------------
Azure Active Directory et les composants de l’authentification intégrée (sur Windows) se trouvent dans le répertoire 'auth'.

Les composants de transaction distribuée JDBC se trouvent dans le répertoire 'xa'.


--------------------
DÉPENDANCES DES FONCTIONNALITÉS
--------------------
Certaines fonctionnalités de Microsoft JDBC Driver 6.4 pour SQL Server sont dépendantes de bibliothèques externes, comme indiqué ci-dessous :

1. Utilisation de « Always Encrypted » avec Azure Key Vault Provider
   Bibliothèque dépendante : azure-keyvault(version 1.0.0) et adal4j(version 1.4.0)
   
2. Utilisation de « Authentification intégrée Azure Active Directory » sur les systèmes d’exploitation Windows, Linux et Mac
   Bibliothèque dépendante : adal4j(version 1.4.0)

Des informations détaillées sur l’ajout de ces bibliothèques dépendantes dans une application Java standard ou une application Maven
sont disponibles ici : https://go.microsoft.com/fwlink/?linkid=867575


-------
EXEMPLES
-------
Les exemples d’applications qui illustrent diverses fonctionnalités du pilote JDBC sont inclus dans le
répertoire "sample". Pour plus d’informations sur chaque exemple et leur exécution, reportez-vous à la 
documentation en ligne.


-----------
LISTE DE MODIFICATIONS
-----------
Modifications de 6.2.2.1 à 6.4.0.0 :
- Le pilote ne lit plus la propriété de connexion 'fipsProvider' et crée une instance du magasin de clés du
  fournisseur préféré en parcourant la liste des fournisseurs de sécurité inscrits.
  
Améliorations : 
- Le pilote génère maintenant des fichiers JAR avec la machine virtuelle JDK 9 et introduit les méthodes de l’API JDBC 4.3.
- Le pilote prend maintenant en charge la mise en cache des métadonnées de l’instruction préparée dans le pilote avec les propriétés de connexion 'disableStatementPooling' et
  'statementPoolingCacheSize'. Cette fonctionnalité est désactivée par défaut.
- Ajout de la prise en charge de SQLVariant DataType dans les requêtes de table, la copie en bloc et les paramètres table.
- Le pilote prend maintenant en charge la spécification du TrustManager personnalisé avec les propriétés de connexion 'trustManagerClass' et 'trustManagerConstructorArg'
  .
- Le pilote prend maintenant en charge la spécification de la version du protocole SSL en spécifiant une nouvelle propriété de connexion 'sslProtocol'.
- Le pilote prend aussi en charge l’authentification intégrée Azure Active Directory sur tous les systèmes d’exploitation pris en charge (Windows/Linux/Mac) 
  avec Kerberos.
- Ajout de la prise en charge des types de données DATETIME et SMALLDATETIME lors de l’utilisation de paramètres table.
- Ajout de la prise en charge de CallableStatement pour reconnaître les noms de paramètres avec un préfixe « @ » (arobase).

Résolutions de bogues :
- Correction de conversions incorrectes lors du changement de casse des littéraux de chaîne dans le pilote quand aucun paramètre régional
  ou aucun paramètre régional non anglais n’est spécifié.
- Résolution des problèmes concernant le nombre de paramètres incorrect retourné par getParameterCount() quand une instruction INSERT 
  contient une sous-requête avec des paramètres.
- Résolution du problème avec getParameterMetaData() quand des caractères d’espace autres que des espaces sont passés dans une requête.
- Résolution du problème avec CallableStatement.getString() quand le type de paramètre est uniqueIdentifier.
- Correction des fuites d’instruction rencontrées dans SQLServerPreparedStatement.getMetaData().
- Résolution du problème pour pouvoir utiliser la valeur par défaut de 15 secondes comme loginTimeout si une valeur zéro est spécifiée.
- Résolution du problème dans la gestion des exceptions PreparedStatement pour lever une exception de traitement initiale.
- Résolution des problèmes avec DatabaseMetaData.getImportedKeys() permettant de retourner des valeurs correctes pour DELETE_RULE et UPDATE_RULE.
- Résolution des problèmes de fuite ClassLoader causés par la classe ActivityCorrelator.
- Résolution du problème de construction SQLServerDataTable qui aboutissait à des objets O(n^2).
- Résolution du problème dans TimeoutTimer pour éviter IllegalThreadStateException si le ThreadGroup sous-jacent a été détruit.
- Résolution du problème de gestion des exceptions pour l’exception Compte verrouillé 18486 lors de l’établissement d’une connexion à SQL Server.
- Résolution du problème causé par xa_recover après le redémarrage de MSDTC.


------------
PROBLÈMES CONNUS
------------
Voici une liste des problèmes connus liés à Microsoft JDBC Driver 6.4 pour SQL Server :

1) LIMITATIONS DES MÉTADONNÉES DE PARAMÈTRES LORS DE L’UTILISATION DE SQL SERVER 2008 OU 2008 R2

1.a) PreparedStatement.getParameterMetadata() lève une SQLException en cas d’utilisation
avec une requête MERGE paramétrée.

1.b) Les métadonnées de paramètres pour les instructions préparées ne fonctionnent pas avec les requêtes comportant des sous-requêtes/jointures.


2) SUPPRESSION DE CONNEXION AVEC SQL AZURE

Lors de la connexion à SQL Azure, les connexions inactives risquent d’être arrêtées par un composant réseau (tel un 
pare-feu) après une période d’inactivité. Pour éviter la suppression des connexions inactives par un composant réseau, 
les paramètres du Registre suivants (ou leurs équivalents non-Windows) doivent être définis sur le système d’exploitation 
dans lequel le pilote est chargé :
           
Registry Setting                                                                   Recommended value
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveTime            30000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\KeepAliveInterval         1000
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters\TcpMaxDataRetransmission  10


3) UTILISATION DE TVP AVEC SQL_VARIANT 

3.a) POUR LES VALEURS DE DATE

Lors de l’utilisation de TVP pour remplir une table qui contient des valeurs datetime/smalldatetime/date stockées dans la colonne sql_variant, 
l’appel de getDateTime()/getSmallDateTime()/getDate() sur le jeu de résultats ne fonctionne pas et lève l’exception suivante :

	java.lang.String ne peut pas être converti en java.sql.Timestamp

Solution de contournement : utilisez plutôt getString() ou getObject().

3.b) UTILISATION DE TVP AVEC SQL_VARIANT POUR LES VALEURS NULL

Si vous utilisez TVP pour remplir une table et envoyez une valeur NULL à une colonne de type sql_variant, vous rencontrez
une exception parce que l’insertion d’une valeur NULL dans une colonne de type sql_variant dans TVP n’est pas prise en charge.

